// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn  main() -> () {
    let mut _0: ();                      // return place in scope 0 at for_loop.rs:1:11: 1:11
    let mut _1: i32;                     // in scope 0 at for_loop.rs:2:6: 2:13
    let mut _3: std::slice::Iter<i32>;   // in scope 0 at for_loop.rs:4:11: 4:13
    let mut _4: &[i32; 6];               // in scope 0 at for_loop.rs:4:11: 4:13
    let mut _7: std::option::Option<&i32>; // in scope 0 at for_loop.rs:4:11: 4:13
    let mut _8: &mut std::slice::Iter<i32>; // in scope 0 at for_loop.rs:4:11: 4:13
    let mut _9: &mut std::slice::Iter<i32>; // in scope 0 at for_loop.rs:4:11: 4:13
    let mut _10: isize;                  // in scope 0 at for_loop.rs:4:6: 4:7
    let mut _12: &i32;                   // in scope 0 at for_loop.rs:4:6: 4:7
    let _14: ();                         // in scope 0 at for_loop.rs:5:3: 5:11
    let mut _15: &mut i32;               // in scope 0 at for_loop.rs:5:3: 5:6
    let mut _16: &i32;                   // in scope 0 at for_loop.rs:5:10: 5:11
    scope 1 {
        debug sum => _1;                 // in scope 1 at for_loop.rs:2:6: 2:13
        let _2: [i32; 6];                // in scope 1 at for_loop.rs:3:6: 3:7
        scope 2 {
            debug a => _2;               // in scope 2 at for_loop.rs:3:6: 3:7
            let mut _5: std::slice::Iter<i32>; // in scope 2 at for_loop.rs:4:11: 4:13
            scope 3 {
                debug iter => _5;        // in scope 3 at for_loop.rs:4:11: 4:13
                let mut _6: &i32;        // in scope 3 at for_loop.rs:4:11: 4:13
                scope 4 {
                    debug __next => _6;  // in scope 4 at for_loop.rs:4:11: 4:13
                    let _11: &i32;       // in scope 4 at for_loop.rs:4:6: 4:7
                    let _13: &i32;       // in scope 4 at for_loop.rs:4:6: 4:7
                    scope 5 {
                        debug val => _11; // in scope 5 at for_loop.rs:4:6: 4:7
                    }
                    scope 6 {
                        debug i => _13;  // in scope 6 at for_loop.rs:4:6: 4:7
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // bb0[0]: scope 0 at for_loop.rs:2:6: 2:13
        _1 = const 0i32;                 // bb0[1]: scope 0 at for_loop.rs:2:16: 2:17
                                         // ty::Const
                                         // + ty: i32
                                         // + val: Value(Scalar(0x00000000))
                                         // mir::Constant
                                         // + span: for_loop.rs:2:16: 2:17
                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }
        StorageLive(_2);                 // bb0[2]: scope 1 at for_loop.rs:3:6: 3:7
        _2 = [const 1i32, const 2i32, const 3i32, const 4i32, const 5i32, const 6i32]; // bb0[3]: scope 1 at for_loop.rs:3:10: 3:28
                                         // ty::Const
                                         // + ty: i32
                                         // + val: Value(Scalar(0x00000001))
                                         // mir::Constant
                                         // + span: for_loop.rs:3:11: 3:12
                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }
                                         // ty::Const
                                         // + ty: i32
                                         // + val: Value(Scalar(0x00000002))
                                         // mir::Constant
                                         // + span: for_loop.rs:3:14: 3:15
                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }
                                         // ty::Const
                                         // + ty: i32
                                         // + val: Value(Scalar(0x00000003))
                                         // mir::Constant
                                         // + span: for_loop.rs:3:17: 3:18
                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }
                                         // ty::Const
                                         // + ty: i32
                                         // + val: Value(Scalar(0x00000004))
                                         // mir::Constant
                                         // + span: for_loop.rs:3:20: 3:21
                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }
                                         // ty::Const
                                         // + ty: i32
                                         // + val: Value(Scalar(0x00000005))
                                         // mir::Constant
                                         // + span: for_loop.rs:3:23: 3:24
                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }
                                         // ty::Const
                                         // + ty: i32
                                         // + val: Value(Scalar(0x00000006))
                                         // mir::Constant
                                         // + span: for_loop.rs:3:26: 3:27
                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000006)) }
        StorageLive(_3);                 // bb0[4]: scope 2 at for_loop.rs:4:11: 4:13
        StorageLive(_4);                 // bb0[5]: scope 2 at for_loop.rs:4:11: 4:13
        _4 = &_2;                        // bb0[6]: scope 2 at for_loop.rs:4:11: 4:13
        _3 = const <&[i32; 6] as std::iter::IntoIterator>::into_iter(move _4) -> bb1; // bb0[7]: scope 2 at for_loop.rs:4:11: 4:13
                                         // ty::Const
                                         // + ty: fn(&[i32; 6]) -> <&[i32; 6] as std::iter::IntoIterator>::IntoIter {<&[i32; 6] as std::iter::IntoIterator>::into_iter}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: for_loop.rs:4:11: 4:13
                                         // + literal: Const { ty: fn(&[i32; 6]) -> <&[i32; 6] as std::iter::IntoIterator>::IntoIter {<&[i32; 6] as std::iter::IntoIterator>::into_iter}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_4);                 // bb1[0]: scope 2 at for_loop.rs:4:12: 4:13
        StorageLive(_5);                 // bb1[1]: scope 2 at for_loop.rs:4:11: 4:13
        _5 = move _3;                    // bb1[2]: scope 2 at for_loop.rs:4:11: 4:13
        goto -> bb2;                     // bb1[3]: scope 3 at for_loop.rs:4:2: 6:3
    }

    bb2: {
        StorageLive(_6);                 // bb2[0]: scope 3 at for_loop.rs:4:11: 4:13
        StorageLive(_7);                 // bb2[1]: scope 4 at for_loop.rs:4:11: 4:13
        StorageLive(_8);                 // bb2[2]: scope 4 at for_loop.rs:4:11: 4:13
        StorageLive(_9);                 // bb2[3]: scope 4 at for_loop.rs:4:11: 4:13
        _9 = &mut _5;                    // bb2[4]: scope 4 at for_loop.rs:4:11: 4:13
        _8 = _9;                         // bb2[5]: scope 4 at for_loop.rs:4:11: 4:13
        _7 = const <std::slice::Iter<i32> as std::iter::Iterator>::next(move _8) -> bb3; // bb2[6]: scope 4 at for_loop.rs:4:11: 4:13
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut std::slice::Iter<i32>) -> std::option::Option<<std::slice::Iter<i32> as std::iter::Iterator>::Item> {<std::slice::Iter<i32> as std::iter::Iterator>::next}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: for_loop.rs:4:11: 4:13
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::slice::Iter<i32>) -> std::option::Option<<std::slice::Iter<i32> as std::iter::Iterator>::Item> {<std::slice::Iter<i32> as std::iter::Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_8);                 // bb3[0]: scope 4 at for_loop.rs:4:12: 4:13
        _10 = discriminant(_7);          // bb3[1]: scope 4 at for_loop.rs:4:6: 4:7
        switchInt(move _10) -> [0isize: bb4, 1isize: bb6, otherwise: bb5]; // bb3[2]: scope 4 at for_loop.rs:4:6: 4:7
    }

    bb4: {
        StorageDead(_9);                 // bb4[0]: scope 4 at for_loop.rs:4:12: 4:13
        StorageDead(_7);                 // bb4[1]: scope 4 at for_loop.rs:4:12: 4:13
        StorageDead(_6);                 // bb4[2]: scope 3 at for_loop.rs:6:2: 6:3
        StorageDead(_5);                 // bb4[3]: scope 2 at for_loop.rs:6:2: 6:3
        StorageDead(_3);                 // bb4[4]: scope 2 at for_loop.rs:4:12: 4:13
        StorageDead(_2);                 // bb4[5]: scope 1 at for_loop.rs:7:1: 7:2
        StorageDead(_1);                 // bb4[6]: scope 0 at for_loop.rs:7:1: 7:2
        return;                          // bb4[7]: scope 0 at for_loop.rs:7:2: 7:2
    }

    bb5: {
        unreachable;                     // bb5[0]: scope 4 at for_loop.rs:4:11: 4:13
    }

    bb6: {
        StorageLive(_11);                // bb6[0]: scope 4 at for_loop.rs:4:6: 4:7
        _11 = ((_7 as Some).0: &i32);    // bb6[1]: scope 4 at for_loop.rs:4:6: 4:7
        StorageLive(_12);                // bb6[2]: scope 5 at for_loop.rs:4:6: 4:7
        _12 = _11;                       // bb6[3]: scope 5 at for_loop.rs:4:6: 4:7
        _6 = move _12;                   // bb6[4]: scope 5 at for_loop.rs:4:6: 4:7
        StorageDead(_12);                // bb6[5]: scope 5 at for_loop.rs:4:6: 4:7
        StorageDead(_11);                // bb6[6]: scope 4 at for_loop.rs:4:6: 4:7
        StorageDead(_9);                 // bb6[7]: scope 4 at for_loop.rs:4:12: 4:13
        StorageDead(_7);                 // bb6[8]: scope 4 at for_loop.rs:4:12: 4:13
        StorageLive(_13);                // bb6[9]: scope 4 at for_loop.rs:4:6: 4:7
        _13 = _6;                        // bb6[10]: scope 4 at for_loop.rs:4:11: 4:13
        StorageLive(_14);                // bb6[11]: scope 6 at for_loop.rs:5:3: 5:11
        StorageLive(_15);                // bb6[12]: scope 6 at for_loop.rs:5:3: 5:6
        _15 = &mut _1;                   // bb6[13]: scope 6 at for_loop.rs:5:3: 5:6
        StorageLive(_16);                // bb6[14]: scope 6 at for_loop.rs:5:10: 5:11
        _16 = _13;                       // bb6[15]: scope 6 at for_loop.rs:5:10: 5:11
        _14 = const <i32 as std::ops::AddAssign<&i32>>::add_assign(move _15, move _16) -> bb7; // bb6[16]: scope 6 at for_loop.rs:5:3: 5:11
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut i32, &i32) {<i32 as std::ops::AddAssign<&i32>>::add_assign}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: for_loop.rs:5:3: 5:11
                                         // + literal: Const { ty: for<'r> fn(&'r mut i32, &i32) {<i32 as std::ops::AddAssign<&i32>>::add_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        StorageDead(_16);                // bb7[0]: scope 6 at for_loop.rs:5:10: 5:11
        StorageDead(_15);                // bb7[1]: scope 6 at for_loop.rs:5:10: 5:11
        StorageDead(_14);                // bb7[2]: scope 6 at for_loop.rs:5:11: 5:12
        StorageDead(_13);                // bb7[3]: scope 4 at for_loop.rs:6:2: 6:3
        StorageDead(_6);                 // bb7[4]: scope 3 at for_loop.rs:6:2: 6:3
        goto -> bb2;                     // bb7[5]: scope 3 at for_loop.rs:4:2: 6:3
    }
}
