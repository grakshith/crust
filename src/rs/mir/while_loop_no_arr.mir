// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn  main() -> () {
    let mut _0: ();                      // return place in scope 0 at while_loop_no_arr.rs:1:11: 1:11
    let mut _1: i32;                     // in scope 0 at while_loop_no_arr.rs:2:6: 2:14
    let mut _3: bool;                    // in scope 0 at while_loop_no_arr.rs:4:8: 4:14
    let mut _4: i32;                     // in scope 0 at while_loop_no_arr.rs:4:8: 4:9
    let mut _5: i32;                     // in scope 0 at while_loop_no_arr.rs:5:11: 5:12
    let _6: ();                          // in scope 0 at <::std::macros::println macros>:2:4: 2:71
    let mut _7: std::fmt::Arguments;     // in scope 0 at <::std::macros::println macros>:2:29: 2:70
    let mut _8: &[&str];                 // in scope 0 at while_loop_no_arr.rs:7:12: 7:16
    let mut _9: &[&str; 2];              // in scope 0 at while_loop_no_arr.rs:7:12: 7:16
    let _10: &[&str; 2];                 // in scope 0 at while_loop_no_arr.rs:7:12: 7:16
    let mut _11: &[std::fmt::ArgumentV1]; // in scope 0 at <::std::macros::println macros>:2:29: 2:70
    let mut _12: &[std::fmt::ArgumentV1; 1]; // in scope 0 at <::std::macros::println macros>:2:29: 2:70
    let _13: &[std::fmt::ArgumentV1; 1]; // in scope 0 at <::std::macros::println macros>:2:29: 2:70
    let _14: [std::fmt::ArgumentV1; 1];  // in scope 0 at <::std::macros::println macros>:2:29: 2:70
    let mut _15: (&i32,);                // in scope 0 at <::std::macros::println macros>:2:29: 2:70
    let mut _16: &i32;                   // in scope 0 at while_loop_no_arr.rs:7:18: 7:22
    let mut _18: std::fmt::ArgumentV1;   // in scope 0 at <::std::macros::println macros>:2:29: 2:70
    let mut _19: &i32;                   // in scope 0 at while_loop_no_arr.rs:7:18: 7:22
    let mut _20: for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at while_loop_no_arr.rs:7:18: 7:22
    scope 1 {
        debug _sum => _1;                // in scope 1 at while_loop_no_arr.rs:2:6: 2:14
        let mut _2: i32;                 // in scope 1 at while_loop_no_arr.rs:3:6: 3:11
        scope 2 {
            debug i => _2;               // in scope 2 at while_loop_no_arr.rs:3:6: 3:11
            let _17: &i32;               // in scope 2 at while_loop_no_arr.rs:7:18: 7:22
            let mut _21: &[&str; 2];     // in scope 2 at while_loop_no_arr.rs:7:12: 7:16
            scope 3 {
                debug arg0 => _17;       // in scope 3 at while_loop_no_arr.rs:7:18: 7:22
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // bb0[0]: scope 0 at while_loop_no_arr.rs:2:6: 2:14
        _1 = const 0i32;                 // bb0[1]: scope 0 at while_loop_no_arr.rs:2:17: 2:18
                                         // ty::Const
                                         // + ty: i32
                                         // + val: Value(Scalar(0x00000000))
                                         // mir::Constant
                                         // + span: while_loop_no_arr.rs:2:17: 2:18
                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }
        StorageLive(_2);                 // bb0[2]: scope 1 at while_loop_no_arr.rs:3:6: 3:11
        _2 = const 0i32;                 // bb0[3]: scope 1 at while_loop_no_arr.rs:3:14: 3:15
                                         // ty::Const
                                         // + ty: i32
                                         // + val: Value(Scalar(0x00000000))
                                         // mir::Constant
                                         // + span: while_loop_no_arr.rs:3:14: 3:15
                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }
        goto -> bb1;                     // bb0[4]: scope 2 at while_loop_no_arr.rs:4:2: 8:3
    }

    bb1: {
        StorageLive(_3);                 // bb1[0]: scope 2 at while_loop_no_arr.rs:4:8: 4:14
        StorageLive(_4);                 // bb1[1]: scope 2 at while_loop_no_arr.rs:4:8: 4:9
        _4 = _2;                         // bb1[2]: scope 2 at while_loop_no_arr.rs:4:8: 4:9
        _3 = Lt(move _4, const 10i32);   // bb1[3]: scope 2 at while_loop_no_arr.rs:4:8: 4:14
                                         // ty::Const
                                         // + ty: i32
                                         // + val: Value(Scalar(0x0000000a))
                                         // mir::Constant
                                         // + span: while_loop_no_arr.rs:4:12: 4:14
                                         // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }
        StorageDead(_4);                 // bb1[4]: scope 2 at while_loop_no_arr.rs:4:13: 4:14
        switchInt(_3) -> [false: bb2, otherwise: bb3]; // bb1[5]: scope 2 at while_loop_no_arr.rs:4:2: 8:3
    }

    bb2: {
        StorageDead(_3);                 // bb2[0]: scope 2 at while_loop_no_arr.rs:4:13: 4:14
        StorageDead(_2);                 // bb2[1]: scope 1 at while_loop_no_arr.rs:9:1: 9:2
        StorageDead(_1);                 // bb2[2]: scope 0 at while_loop_no_arr.rs:9:1: 9:2
        return;                          // bb2[3]: scope 0 at while_loop_no_arr.rs:9:2: 9:2
    }

    bb3: {
        StorageLive(_5);                 // bb3[0]: scope 2 at while_loop_no_arr.rs:5:11: 5:12
        _5 = _2;                         // bb3[1]: scope 2 at while_loop_no_arr.rs:5:11: 5:12
        _1 = Add(_1, move _5);           // bb3[2]: scope 2 at while_loop_no_arr.rs:5:3: 5:12
        StorageDead(_5);                 // bb3[3]: scope 2 at while_loop_no_arr.rs:5:11: 5:12
        _2 = Add(_2, const 1i32);        // bb3[4]: scope 2 at while_loop_no_arr.rs:6:3: 6:9
                                         // ty::Const
                                         // + ty: i32
                                         // + val: Value(Scalar(0x00000001))
                                         // mir::Constant
                                         // + span: while_loop_no_arr.rs:6:8: 6:9
                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }
        StorageLive(_6);                 // bb3[5]: scope 2 at <::std::macros::println macros>:2:4: 2:71
        StorageLive(_7);                 // bb3[6]: scope 2 at <::std::macros::println macros>:2:29: 2:70
        StorageLive(_8);                 // bb3[7]: scope 2 at while_loop_no_arr.rs:7:12: 7:16
        StorageLive(_9);                 // bb3[8]: scope 2 at while_loop_no_arr.rs:7:12: 7:16
        StorageLive(_10);                // bb3[9]: scope 2 at while_loop_no_arr.rs:7:12: 7:16
        _21 = const main::promoted[0];   // bb3[10]: scope 2 at while_loop_no_arr.rs:7:12: 7:16
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(DefId(0:3 ~ while_loop_no_arr[317d]::main[0]), [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: while_loop_no_arr.rs:7:12: 7:16
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(DefId(0:3 ~ while_loop_no_arr[317d]::main[0]), [], Some(promoted[0])) }
        _10 = _21;                       // bb3[11]: scope 2 at while_loop_no_arr.rs:7:12: 7:16
        _9 = _10;                        // bb3[12]: scope 2 at while_loop_no_arr.rs:7:12: 7:16
        _8 = move _9 as &[&str] (Pointer(Unsize)); // bb3[13]: scope 2 at while_loop_no_arr.rs:7:12: 7:16
        StorageDead(_9);                 // bb3[14]: scope 2 at while_loop_no_arr.rs:7:15: 7:16
        StorageLive(_11);                // bb3[15]: scope 2 at <::std::macros::println macros>:2:29: 2:70
        StorageLive(_12);                // bb3[16]: scope 2 at <::std::macros::println macros>:2:29: 2:70
        StorageLive(_13);                // bb3[17]: scope 2 at <::std::macros::println macros>:2:29: 2:70
        StorageLive(_14);                // bb3[18]: scope 2 at <::std::macros::println macros>:2:29: 2:70
        StorageLive(_15);                // bb3[19]: scope 2 at <::std::macros::println macros>:2:29: 2:70
        StorageLive(_16);                // bb3[20]: scope 2 at while_loop_no_arr.rs:7:18: 7:22
        _16 = &_1;                       // bb3[21]: scope 2 at while_loop_no_arr.rs:7:18: 7:22
        (_15.0: &i32) = move _16;        // bb3[22]: scope 2 at <::std::macros::println macros>:2:29: 2:70
        StorageDead(_16);                // bb3[23]: scope 2 at <::std::macros::println macros>:2:69: 2:70
        StorageLive(_17);                // bb3[24]: scope 2 at while_loop_no_arr.rs:7:18: 7:22
        _17 = (_15.0: &i32);             // bb3[25]: scope 2 at while_loop_no_arr.rs:7:18: 7:22
        StorageLive(_18);                // bb3[26]: scope 3 at <::std::macros::println macros>:2:29: 2:70
        StorageLive(_19);                // bb3[27]: scope 3 at while_loop_no_arr.rs:7:18: 7:22
        _19 = _17;                       // bb3[28]: scope 3 at while_loop_no_arr.rs:7:18: 7:22
        StorageLive(_20);                // bb3[29]: scope 3 at while_loop_no_arr.rs:7:18: 7:22
        _20 = const <i32 as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // bb3[30]: scope 3 at while_loop_no_arr.rs:7:18: 7:22
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<i32 as std::fmt::Display>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: while_loop_no_arr.rs:7:18: 7:22
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<i32 as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _18 = const std::fmt::ArgumentV1::new::<i32>(move _19, move _20) -> bb4; // bb3[31]: scope 3 at <::std::macros::println macros>:2:29: 2:70
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b i32, for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<i32>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: <::std::macros::println macros>:2:29: 2:70
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32, for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_20);                // bb4[0]: scope 3 at <::std::macros::println macros>:2:69: 2:70
        StorageDead(_19);                // bb4[1]: scope 3 at <::std::macros::println macros>:2:69: 2:70
        _14 = [move _18];                // bb4[2]: scope 3 at <::std::macros::println macros>:2:29: 2:70
        StorageDead(_18);                // bb4[3]: scope 3 at <::std::macros::println macros>:2:69: 2:70
        StorageDead(_17);                // bb4[4]: scope 2 at <::std::macros::println macros>:2:69: 2:70
        _13 = &_14;                      // bb4[5]: scope 2 at <::std::macros::println macros>:2:29: 2:70
        _12 = _13;                       // bb4[6]: scope 2 at <::std::macros::println macros>:2:29: 2:70
        _11 = move _12 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // bb4[7]: scope 2 at <::std::macros::println macros>:2:29: 2:70
        StorageDead(_12);                // bb4[8]: scope 2 at <::std::macros::println macros>:2:69: 2:70
        _7 = const std::fmt::Arguments::new_v1(move _8, move _11) -> bb5; // bb4[9]: scope 2 at <::std::macros::println macros>:2:29: 2:70
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: <::std::macros::println macros>:2:29: 2:70
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_11);                // bb5[0]: scope 2 at <::std::macros::println macros>:2:69: 2:70
        StorageDead(_8);                 // bb5[1]: scope 2 at <::std::macros::println macros>:2:69: 2:70
        _6 = const std::io::_print(move _7) -> bb6; // bb5[2]: scope 2 at <::std::macros::println macros>:2:4: 2:71
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: <::std::macros::println macros>:2:4: 2:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_7);                 // bb6[0]: scope 2 at <::std::macros::println macros>:2:70: 2:71
        StorageDead(_15);                // bb6[1]: scope 2 at <::std::macros::println macros>:2:72: 2:73
        StorageDead(_14);                // bb6[2]: scope 2 at <::std::macros::println macros>:2:72: 2:73
        StorageDead(_13);                // bb6[3]: scope 2 at <::std::macros::println macros>:2:72: 2:73
        StorageDead(_10);                // bb6[4]: scope 2 at <::std::macros::println macros>:2:72: 2:73
        StorageDead(_6);                 // bb6[5]: scope 2 at <::std::macros::println macros>:2:72: 2:73
        StorageDead(_3);                 // bb6[6]: scope 2 at while_loop_no_arr.rs:4:13: 4:14
        goto -> bb1;                     // bb6[7]: scope 2 at while_loop_no_arr.rs:4:2: 8:3
    }
}

promoted[0] in  main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at while_loop_no_arr.rs:7:12: 7:16
    let mut _1: [&str; 2];               // in scope 0 at while_loop_no_arr.rs:7:12: 7:16
    let mut _2: &str;                    // in scope 0 at while_loop_no_arr.rs:7:12: 7:16
    let mut _3: &str;                    // in scope 0 at while_loop_no_arr.rs:7:12: 7:16
    let mut _4: &str;                    // in scope 0 at while_loop_no_arr.rs:7:12: 7:16
    let mut _5: &str;                    // in scope 0 at while_loop_no_arr.rs:7:12: 7:16
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        _3 = const "";                   // bb0[0]: scope 0 at while_loop_no_arr.rs:7:12: 7:16
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })
                                         // mir::Constant
                                         // + span: while_loop_no_arr.rs:7:12: 7:16
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }
        _2 = _3;                         // bb0[1]: scope 0 at while_loop_no_arr.rs:7:12: 7:16
        _5 = const "\n";                 // bb0[2]: scope 0 at while_loop_no_arr.rs:7:12: 7:16
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: while_loop_no_arr.rs:7:12: 7:16
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _4 = _5;                         // bb0[3]: scope 0 at while_loop_no_arr.rs:7:12: 7:16
        _1 = [move _2, move _4];         // bb0[4]: scope 0 at while_loop_no_arr.rs:7:12: 7:16
        _0 = &_1;                        // bb0[5]: scope 0 at while_loop_no_arr.rs:7:12: 7:16
        return;                          // bb0[6]: scope 0 at while_loop_no_arr.rs:7:12: 7:16
    }
}
